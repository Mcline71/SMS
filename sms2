from datetime import datetime
import random

# Data Storage
students = []
fee_structures = {}
payments = []
receipt_counter = 1000

# Default Fee Structures
def initialize_fee_structures():
    """Initialize default fee structures for different classes"""
    global fee_structures
    fee_structures = {
        "Primary": {
            "tuition": 5000.00,
            "hostel": 3000.00,
            "transport": 1500.00,
            "library": 500.00,
            "sports": 800.00,
            "computer_lab": 600.00
        },
        "Secondary": {
            "tuition": 7000.00,
            "hostel": 3500.00,
            "transport": 1800.00,
            "library": 700.00,
            "sports": 1000.00,
            "computer_lab": 800.00
        },
        "High School": {
            "tuition": 9000.00,
            "hostel": 4000.00,
            "transport": 2000.00,
            "library": 900.00,
            "sports": 1200.00,
            "computer_lab": 1000.00
        }
    }

def add_student():
    """Add a new student to the system"""
    print("\n" + "="*60)
    print("ADD NEW STUDENT")
    print("="*60)
    
    student = {
        "id": input("Enter Student ID: "),
        "name": input("Enter Student Name: "),
        "class": input("Enter Class (Primary/Secondary/High School): "),
        "email": input("Enter Email: "),
        "phone": input("Enter Phone Number: "),
        "parent_contact": input("Enter Parent Contact: "),
        "total_fees": 0.0,
        "paid_amount": 0.0,
        "pending_dues": 0.0
    }
    
    # Calculate total fees based on class
    if student['class'] in fee_structures:
        total = sum(fee_structures[student['class']].values())
        student['total_fees'] = total
        student['pending_dues'] = total
    
    students.append(student)
    print("\n✓ Student added successfully!")
    print(f"Total Fees: GH₵ {student['total_fees']:.2f}")

def view_fee_structure():
    """Display fee structures for all classes"""
    print("\n" + "="*80)
    print("FEE STRUCTURE")
    print("="*80)
    
    for class_name, fees in fee_structures.items():
        print(f"\n{class_name.upper()}:")
        print("-" * 60)
        total = 0
        for fee_type, amount in fees.items():
            print(f"  {fee_type.replace('_', ' ').title():20} : GH₵ {amount:,.2f}")
            total += amount
        print("-" * 60)
        print(f"  {'TOTAL':20} : GH₵ {total:,.2f}")
        print()

def update_fee_structure():
    """Update fee structure for a class"""
    print("\n" + "="*60)
    print("UPDATE FEE STRUCTURE")
    print("="*60)
    
    print("\nAvailable Classes:")
    for i, class_name in enumerate(fee_structures.keys(), 1):
        print(f"{i}. {class_name}")
    
    choice = input("\nSelect class to update: ")
    class_names = list(fee_structures.keys())
    
    try:
        class_name = class_names[int(choice) - 1]
        print(f"\nUpdating fees for {class_name}")
        print("(Enter new amount or press Enter to keep current)\n")
        
        for fee_type in fee_structures[class_name].keys():
            current = fee_structures[class_name][fee_type]
            new_amount = input(f"{fee_type.replace('_', ' ').title()} [GH₵ {current:.2f}]: ")
            if new_amount:
                fee_structures[class_name][fee_type] = float(new_amount)
        
        print("\n✓ Fee structure updated successfully!")
    except (IndexError, ValueError):
        print("\n✗ Invalid selection!")

def record_payment():
    """Record a fee payment"""
    global receipt_counter
    
    if not students:
        print("\n✗ No students in the system!")
        return
    
    print("\n" + "="*60)
    print("RECORD PAYMENT")
    print("="*60)
    
    student_id = input("\nEnter Student ID: ")
    student = None
    
    for s in students:
        if s['id'] == student_id:
            student = s
            break
    
    if not student:
        print("\n✗ Student not found!")
        return
    
    print(f"\nStudent: {student['name']}")
    print(f"Total Fees: GH₵ {student['total_fees']:.2f}")
    print(f"Paid Amount: GH₵ {student['paid_amount']:.2f}")
    print(f"Pending Dues: GH₵ {student['pending_dues']:.2f}")
    
    try:
        amount = float(input("\nEnter payment amount: GH₵ "))
        
        if amount <= 0:
            print("\n✗ Invalid amount!")
            return
        
        if amount > student['pending_dues']:
            print(f"\n⚠ Warning: Amount exceeds pending dues (GH₵ {student['pending_dues']:.2f})")
            confirm = input("Continue? (yes/no): ")
            if confirm.lower() != 'yes':
                return
        
        payment_method = input("Payment Method (Cash/Card/Bank Transfer/Cheque): ")
        remarks = input("Remarks (optional): ")
        
        # Record payment
        payment = {
            "receipt_no": f"RCP{receipt_counter:06d}",
            "student_id": student['id'],
            "student_name": student['name'],
            "amount": amount,
            "payment_method": payment_method,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "remarks": remarks
        }
        
        payments.append(payment)
        receipt_counter += 1
        
        # Update student record
        student['paid_amount'] += amount
        student['pending_dues'] = student['total_fees'] - student['paid_amount']
        
        # Generate receipt
        print("\n" + "="*60)
        print("PAYMENT RECEIPT")
        print("="*60)
        print(f"Receipt No:      {payment['receipt_no']}")
        print(f"Date:            {payment['date']}")
        print(f"Student ID:      {student['id']}")
        print(f"Student Name:    {student['name']}")
        print(f"Amount Paid:     GH₵ {amount:,.2f}")
        print(f"Payment Method:  {payment_method}")
        print(f"Remaining Dues:  GH₵ {student['pending_dues']:,.2f}")
        if remarks:
            print(f"Remarks:         {remarks}")
        print("="*60)
        print("\n✓ Payment recorded successfully!")
        
    except ValueError:
        print("\n✗ Invalid amount!")

def view_payment_history():
    """View payment history"""
    if not payments:
        print("\n✗ No payment records found!")
        return
    
    print("\n" + "="*100)
    print("PAYMENT HISTORY")
    print("="*100)
    print(f"{'Receipt No':<15} {'Date':<20} {'Student ID':<12} {'Student Name':<20} {'Amount':<15} {'Method':<15}")
    print("-"*100)
    
    for payment in payments:
        print(f"{payment['receipt_no']:<15} {payment['date']:<20} {payment['student_id']:<12} "
              f"{payment['student_name']:<20} GH₵ {payment['amount']:<13,.2f} {payment['payment_method']:<15}")
    
    print("="*100)
    print(f"\nTotal Payments: {len(payments)}")
    print(f"Total Amount Collected: GH₵ {sum(p['amount'] for p in payments):,.2f}\n")

def view_pending_dues():
    """View all students with pending dues"""
    if not students:
        print(" No students in the system!")
        return
    
    pending_students = [s for s in students if s['pending_dues'] > 0]
    
    if not pending_students:
        print("\n✓ No pending dues! All fees collected.")
        return
    
    print("\n" + "="*100)
    print("PENDING DUES REPORT")
    print("="*100)
    print(f"{'Student ID':<12} {'Student Name':<25} {'Total Fees':<15} {'Paid':<15} {'Pending':<15}")
    print("-"*100)
    
    total_pending = 0
    for student in pending_students:
        print(f"{student['id']:<12} {student['name']:<25} GH₵ {student['total_fees']:<13,.2f} "
              f"GH₵ {student['paid_amount']:<13,.2f} GH₵ {student['pending_dues']:<13,.2f}")
        total_pending += student['pending_dues']
    
    print("="*100)
    print(f"Total Students with Pending Dues: {len(pending_students)}")
    print(f"Total Pending Amount: GH₵ {total_pending:,.2f}\n")

def send_due_notifications():
    """Send notifications for pending dues"""
    if not students:
        print("\n✗ No students in the system!")
        return
    
    pending_students = [s for s in students if s['pending_dues'] > 0]
    
    if not pending_students:
        print("\n✓ No pending dues! No notifications needed.")
        return
    
    print("\n" + "="*60)
    print("SENDING DUE NOTIFICATIONS")
    print("="*60)
    
    for student in pending_students:
        print(f" Notification sent to: {student['name']}")
        print(f"   Email: {student['email']}")
        print(f"   Phone: {student['parent_contact']}")
        print(f"   Pending Amount: GH₵ {student['pending_dues']:,.2f}")
        print(f"   Message: \"Dear Parent/Guardian, your ward {student['name']} "
              f"has pending fees of GH₵ {student['pending_dues']:,.2f}. "
              f"Please clear dues at the earliest.\"")
    
    print(f"\n✓ {len(pending_students)} notifications sent successfully!")

def financial_reports():
    """Generate financial reports"""
    print("\n" + "="*80)
    print("FINANCIAL REPORT")
    print("="*80)
    
    if not students:
        print("\n✗ No data available!")
        return
    
    total_fees = sum(s['total_fees'] for s in students)
    total_collected = sum(s['paid_amount'] for s in students)
    total_pending = sum(s['pending_dues'] for s in students)
    
    collection_rate = (total_collected / total_fees * 100) if total_fees > 0 else 0
    
    print(f"\nTotal Students: {len(students)}")
    print(f"Total Fee Amount: GH₵ {total_fees:,.2f}")
    print(f"Total Collected: GH₵ {total_collected:,.2f}")
    print(f"Total Pending: GH₵ {total_pending:,.2f}")
    print(f"Collection Rate: {collection_rate:.2f}%")
    
    # Class-wise breakdown
    print("\n" + "-"*80)
    print("CLASS-WISE BREAKDOWN")
    print("-"*80)
    
    class_data = {}
    for student in students:
        class_name = student['class']
        if class_name not in class_data:
            class_data[class_name] = {
                'count': 0,
                'total': 0,
                'collected': 0,
                'pending': 0
            }
        class_data[class_name]['count'] += 1
        class_data[class_name]['total'] += student['total_fees']
        class_data[class_name]['collected'] += student['paid_amount']
        class_data[class_name]['pending'] += student['pending_dues']
    
    for class_name, data in class_data.items():
        print(f"\n{class_name}:")
        print(f"  Students: {data['count']}")
        print(f"  Total Fees: GH₵ {data['total']:,.2f}")
        print(f"  Collected: GH₵ {data['collected']:,.2f}")
        print(f"  Pending: GH₵ {data['pending']:,.2f}")
    
    # Payment method breakdown
    if payments:
        print("\n" + "-"*80)
        print("PAYMENT METHOD BREAKDOWN")
        print("-"*80)
        
        method_data = {}
        for payment in payments:
            method = payment['payment_method']
            if method not in method_data:
                method_data[method] = 0
            method_data[method] += payment['amount']
        
        for method, amount in method_data.items():
            print(f"  {method}: GH₵ {amount:,.2f}")
    
    print("\n" + "="*80 + "\n")

def view_student_ledger():
    """View detailed ledger for a specific student"""
    if not students:
        print("\n✗ No students in the system!")
        return
    
    student_id = input("\nEnter Student ID: ")
    student = None
    
    for s in students:
        if s['id'] == student_id:
            student = s
            break
    
    if not student:
        print( "Student not found!")
        return
    
    print("\n" + "="*80)
    print(f"STUDENT LEDGER - {student['name']}")
    print("="*80)
    print(f"Student ID: {student['id']}")
    print(f"Class: {student['class']}")
    print(f"Email: {student['email']}")
    print(f"Phone: {student['phone']}")
    print("-"*80)
    
    # Fee breakdown
    if student['class'] in fee_structures:
        print("\nFEE BREAKDOWN:")
        for fee_type, amount in fee_structures[student['class']].items():
            print(f"  {fee_type.replace('_', ' ').title():20} : GH₵ {amount:,.2f}")
        print("-"*80)
    
    print(f"\nTotal Fees:        GH₵ {student['total_fees']:,.2f}")
    print(f"Amount Paid:       GH₵ {student['paid_amount']:,.2f}")
    print(f"Pending Dues:      GH₵ {student['pending_dues']:,.2f}")
    
    # Payment history for this student
    student_payments = [p for p in payments if p['student_id'] == student_id]
    
    if student_payments:
        print("\n" + "-"*80)
        print("PAYMENT HISTORY:")
        print("-"*80)
        print(f"{'Receipt No':<15} {'Date':<20} {'Amount':<15} {'Method':<15}")
        print("-"*80)
        
        for payment in student_payments:
            print(f"{payment['receipt_no']:<15} {payment['date']:<20} "
                  f"GH₵ {payment['amount']:<13,.2f} {payment['payment_method']:<15}")
    else:
        print("\n✗ No payment history found for this student.")
    
    print("="*80 + "\n")

def main():
    """Main program loop"""
    initialize_fee_structures()
    
    while True:
        print("\n" + "="*60)
        print("      FEES AND FINANCE MANAGEMENT SYSTEM")
        print("="*60)
        print("1.  Add Student")
        print("2.  View Fee Structure")
        print("3.  Update Fee Structure")
        print("4.  Record Payment")
        print("5.  View Payment History")
        print("6.  View Pending Dues")
        print("7.  Send Due Notifications")
        print("8.  View Student Ledger")
        print("9.  Generate Financial Report")
        print("10. Exit")
        print("="*60)
        
        choice = input("\nEnter your choice (1-10): ")
        
        if choice == "1":
            add_student()
        elif choice == "2":
            view_fee_structure()
        elif choice == "3":
            update_fee_structure()
        elif choice == "4":
            record_payment()
        elif choice == "5":
            view_payment_history()
        elif choice == "6":
            view_pending_dues()
        elif choice == "7":
            send_due_notifications()
        elif choice == "8":
            view_student_ledger()
        elif choice == "9":
            financial_reports()
        elif choice == "10":
            print("\nThank you for using Fees and Finance Management System. Goodbye!\n")
            break
        else:
            print("\n✗ Invalid choice! Please enter a number between 1 and 10.")

if __name__ == "__main__":
    main()